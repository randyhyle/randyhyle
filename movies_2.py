# File: movies_2.py## Description: Determine average rating for movie reviews# that contains a given word. Words can be entered by the# user or read from files.# Data files from https://nlp.stanford.edu/sentiment/# Assignment based on the Nifty Assignment:# http://nifty.stanford.edu/2016/manley-urness-movie-review-sentiment/## Assignment Number: 12## Name: Randy Hy Le# EID:  hhl385# Email: le.hy.randy@gmail.com# Grader: Emma## On my honor, Randy Hy Le, this programming assignment is my own work# and I have not provided this code to any other student.def main():    """Read the main data file and run the menu loop."""    print('Welcome to the movie sentiment program - Version 2.')    file_name = input('Enter file name with reviews: ')    words_dictionary, num_words_dictionary = get_dictionaries(file_name)    choice = get_choice()    while '1' <= choice <= '3':        # Get the index of the function to call.        if choice == '1':            show_individual_stats(words_dictionary, 'a word: ')        elif choice == '2':            cutoff_stats(words_dictionary)        else:            show_individual_stats(num_words_dictionary, 'the number of '                                                        'words: ')        choice = get_choice()def get_choice():    """Display the menu and get the users choice.    Returns the user's choice as a String.    """    print()    print('OPTIONS:')    print('1. See statistics for a given word.')    print('2. See all words that meet given cut-offs.')    print('3. See statistics for reviews with a given number of words.')    print('4. Or anything else to quit.')    result = input('Please enter your choice: ')    print()    return resultdef get_dictionaries(file_name):    """Given the file name, create and return two dictionaries.    All strings in reviews are shifted to lower case.    The first dictionary has keys that are words (any and all    strings in the reviews) with the value a list of length 2.    Both elements of the list are integers.    The first element in the list is the number of reviews that    contain the word (key) and the second is the sum of all the    review scores that contain the word (key).    The second dictionary has keys that are also strings representing    the number of words (any and all strings) in a review.    So for example '12' if the review has 12 words.    *** The reason we use strings instead of ints as the key of the    second dictionary so so we can use the same code late to prompt    the use for a key and display results regardless of which    dictionary we are using.***    The value for each key is also a list of length 2. Just like the first    dictionary the first element in the list is the number of reviews    that contain the word (key) and the second is the sum of all the    review scores that contain the word (key).    """    first_dict = get_first_dictionary(file_name)    second_dict = get_second_dictionary(file_name)    return first_dict, second_dictdef show_individual_stats(dictionary, prompt):    """Ask the user for a key and show the statistics for that key.    The key entered by the user is converted to lower case.    """    # Ask user for input and convert to lowercase    print('Enter ', end='')    user_input = input(prompt).lower()    if user_input not in dictionary:        print(user_input, 'is not present in the dictionary.')    else:        num_reviews = int(dictionary[user_input][0])        review_score = int(dictionary[user_input][1])        average = review_score / num_reviews        print('Number of reviews =', dictionary[user_input][0])        print('Average review score =', format(average, '.2f'))def cutoff_stats(words_dictionary):    """Ask the user if the want words above or below a given cutoff.    Get the cutoff for average review score and the minimum number    of reviews the word must appear in. Display the results.    """    print('Enter the letter a to show scores above a given cutoff,')    user_input = input('anything else to show scores below a given cutoff: ')    score_cutoff = float(input('Enter the score cutoff between 0 and 4: '))    min_reviews = int(input('Enter the minimum number of '                            'reviews required: '))    if user_input == 'a':        cutoff(words_dictionary, user_input, score_cutoff, min_reviews)    else:        cutoff(words_dictionary, user_input, score_cutoff, min_reviews)def get_first_dictionary(file_name):    """Given the file name. Return a dictionary containing a word (key)    and a list (value) containing the number of reviews that word    appears in and the sum of all the review scores that word appeared    in reviews."""    counts = {}    # Read each line in the file and split into strings excluding    # the review score.    with open(file_name, 'r') as in_file:        for line in in_file:            score = int(line[0])            # For each review we iterate, we only want the first word            # instance it appeared in the review.            for word in set(line[1:].lower().rstrip().split(' ')):                if len(word) > 0:                    if word in counts:                        counts[word][0] += 1                        counts[word][1] += score                    else:                        counts[word] = [1, score]    return countsdef get_second_dictionary(file_name):    """Given the file name. Return a dictionary that contains a key    with the length of the review as a string. The values are the same    in format as the first dictionary."""    counts = {}    with open(file_name, 'r') as in_file:        for line in in_file:            score = int(line[0])            key = str(len(line.rstrip()) - 1)            if key in counts:                counts[key][0] += 1                counts[key][1] += score            else:                counts[key] = [1, score]    return countsdef cutoff(words_dictionary, user_input, score_cutoff, min_reviews):    """Prints the scores either above or below the cutoff based on    user input"""    if user_input == 'a':        print('Results: ')        for key in sorted(words_dictionary):            num_reviews = int(words_dictionary[key][0])            review_score = int(words_dictionary[key][1])            average = review_score / num_reviews            if average >= score_cutoff and num_reviews >= min_reviews:                print('Word = ', key, '.', sep='', end='')                print(' Number of reviews = ', num_reviews, '.', sep='',                      end='')                print(' Average review score = ', format(average, '.2f'))    else:        print('Results: ')        for key in sorted(words_dictionary):            num_reviews = int(words_dictionary[key][0])            review_score = int(words_dictionary[key][1])            average = review_score / num_reviews            if average <= score_cutoff and num_reviews >= min_reviews:                print('Word = ', key, '.', sep='', end='')                print(' Number of reviews = ', num_reviews, '.', sep='',                      end='')                print(' Average review score = ', format(average, '.2f'))main()